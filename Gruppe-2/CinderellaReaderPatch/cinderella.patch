--- cinderella.js	2018-05-15 17:51:45.141026000 +0200
+++ cinderella_patch_0.js	2018-05-16 03:02:02.244629000 +0200
@@ -74,8 +74,9 @@
                 defRadius, circle, erg, poly, point, objName2, erg2, lines, point2, oX, oY, scale,
 
                 makeRadiusFun = function (el, b) {
-                    return function () {
-                        return b.select(el[0]).Dist(b.select[1]);
+                    return function () {		
+						return b.select(el[0]).Dist(b.select(el[1]));
+                        //return b.select(el[0]).Dist(b.select[1]);
                     };
                 };
 
@@ -91,7 +92,7 @@
                         pCoords[j] = pCoords[j].slice(0, pCoords[j].search(/\+i\*/));
                     }
 
-                    objName = dataLines[i].match(/"[A-Za-z]*"/);
+                    objName = dataLines[i].match(/"[A-Za-z0-9]*"/);
                     objName = objName[0].slice(1, objName[0].length - 1);
                     erg = this.readPointProperties(dataLines, i);
                     i = erg[1];
@@ -160,7 +161,8 @@
                         strokeColor: erg[0][0],
                         fillColor: erg[1],
                         fillOpacity: erg[2],
-                        strokeWidth: erg[0][2]
+                        strokeWidth: erg[0][2],
+						dash: erg[4]
                     });
 
                 // circle, defined by point and fixed radius
@@ -185,7 +187,8 @@
                         strokeColor: erg[0][0],
                         fillColor: erg[1],
                         fillOpacity: erg[2],
-                        strokeWidth: erg[0][2]
+                        strokeWidth: erg[0][2],
+						dash: erg[4]
                     });
 
                 // glider on a circle
@@ -288,7 +291,7 @@
                     defPoints = defPoints.split(',');
                     defName = [];
                     for (j = 0; j < defPoints.length; j++) {
-                        defName[j] = defPoints[j].match(/"[A-Za-z]*"/)[0];
+                        defName[j] = defPoints[j].match(/"[A-Za-z0-9]*"/)[0];
                         defName[j] = defName[j].slice(1, defName[j].length - 1);
                     }
                     objName = dataLines[i].match(/"[A-Za-z0-9]*"/);
@@ -306,6 +309,7 @@
                         fillColor: erg[1],
                         fillOpacity: erg[2],
                         strokeWidth: erg[0][2],
+						dash: erg[4],
                         center: {
                             name: '',
                             visible: false
@@ -319,7 +323,7 @@
                     defName = [];
 
                     for (j = 0; j < defPoints.length; j++) {
-                        defName[j] = defPoints[j].match(/"[A-Za-z]*"/)[0];
+                        defName[j] = defPoints[j].match(/"[A-Za-z0-9]*"/)[0];
                         defName[j] = defName[j].slice(1, defName[j].length - 1);
                     }
                     objName = dataLines[i].match(/"[A-Za-z0-9]*"/);
@@ -366,7 +370,7 @@
                     defName = [];
 
                     for (j = 0; j < defPoints.length; j++) {
-                        defName[j] = defPoints[j].match(/"[A-Za-z]*"/)[0];
+                        defName[j] = defPoints[j].match(/"[A-Za-z0-9]*"/)[0];
                         defName[j] = defName[j].slice(1, defName[j].length - 1);
                     }
 
@@ -412,7 +416,8 @@
                             strokeColor: erg[0][0],
                             fillColor: erg[1],
                             fillOpacity: erg[2],
-                            strokeWidth: erg[0][2]
+                            strokeWidth: erg[0][2],
+							dash: erg[4]
                         });
                     } else {
                         this.board.create('ellipse', [
@@ -424,7 +429,8 @@
                             strokeColor: erg[0][0],
                             fillColor: erg[1],
                             fillOpacity: erg[2],
-                            strokeWidth: erg[0][2]
+                            strokeWidth: erg[0][2],
+							dash: erg[4]
                         });
                     }
                     i = erg[3];
@@ -436,7 +442,7 @@
                     defName = [];
 
                     for (j = 0; j < defPoints.length; j++) {
-                        defName[j] = defPoints[j].match(/"[A-Za-z]*"/)[0];
+                        defName[j] = defPoints[j].match(/"[A-Za-z0-9]*"/)[0];
                         defName[j] = defName[j].slice(1, defName[j].length - 1);
                     }
 
@@ -447,6 +453,7 @@
 
                     this.board.create('parabola', [this.board.select(defName[0]), this.board.select(defName[1])], {
                         name: objName,
+						dash: erg[4],
                         strokeColor: erg[0][0],
                         fillColor: erg[1],
                         fillOpacity: erg[2],
@@ -460,7 +467,7 @@
                     defName = [];
 
                     for (j = 0; j < defPoints.length; j++) {
-                        defName[j] = defPoints[j].match(/"[A-Za-z]*"/)[0];
+                        defName[j] = defPoints[j].match(/"[A-Za-z0-9]*"/)[0];
                         defName[j] = defName[j].slice(1, defName[j].length - 1);
                         defName[j] = this.board.select(defName[j]);
                     }
@@ -486,7 +493,7 @@
                     defName = [];
 
                     for (j = 0; j < defPoints.length; j++) {
-                        defName[j] = defPoints[j].match(/"[A-Za-z]*"/)[0];
+                        defName[j] = defPoints[j].match(/"[A-Za-z0-9]*"/)[0];
                         defName[j] = defName[j].slice(1, defName[j].length - 1);
                     }
 
@@ -504,7 +511,8 @@
                         strokeColor: erg[0][0],
                         fillColor: erg[1],
                         fillOpacity: erg[2],
-                        strokeWidth: erg[0][2]
+                        strokeWidth: erg[0][2],
+						dash: erg[4]
                     });
 
                 // line defined by ONE point
@@ -525,7 +533,7 @@
                     j = this.board.select(defName);
                     point = this.board.create('point', [
                         j.coords.usrCoords[1] + parseFloat(pCoords[0]),
-                        j.coords.usrCoords[2] + parseFloat(pCoords[1])
+                        j.coords.usrCoords[2] - parseFloat(pCoords[1])
                     ], {visible: false});
 
                     erg = this.readLineProperties(dataLines, i);
@@ -546,7 +554,7 @@
                     defName = [];
 
                     for (j = 0; j < defPoints.length; j++) {
-                        defName[j] = defPoints[j].match(/"[A-Za-z]*"/)[0];
+                        defName[j] = defPoints[j].match(/"[A-Za-z0-9]*"/)[0];
                         defName[j] = defName[j].slice(1, defName[j].length - 1);
                     }
 
@@ -555,14 +563,16 @@
                     erg = this.readCircleProperties(dataLines, i);
                     i = erg[3];
                     defRadius = makeRadiusFun(defName, this.board);
-
+					
                     this.board.create('circle', [this.board.select(defName[2]), defRadius], {
                         name: objName,
                         strokeColor: erg[0][0],
                         fillColor: erg[1],
                         fillOpacity: erg[2],
-                        strokeWidth: erg[0][2]
+                        strokeWidth: erg[0][2],
+						dash: erg[4]
                     });
+					defName = [];
 
                 // angular bisector
                 } else if (dataLines[i].search(/AngularBisector\(.+/) !== -1) {
@@ -623,7 +633,7 @@
                     defName = [];
 
                     for (j = 0; j < defPoints.length; j++) {
-                        defName[j] = defPoints[j].match(/"[A-Za-z]*"/)[0];
+                        defName[j] = defPoints[j].match(/"[A-Za-z0-9]*"/)[0];
                         defName[j] = defName[j].slice(1, defName[j].length - 1);
                     }
                     objName = dataLines[i].match(/"[A-Za-z0-9]*"/);
@@ -795,15 +805,19 @@
         },
 
         readPointProperties: function (dataLines, i) {
-            var objAppearance, border, labelcolor;
-
+            var objAppearance, border, labelcolor, temp;
+			
+			temp = i;
+			
             do {
                 i += 1;
             } while (dataLines[i].search(/setAppearance/) === -1);
-
+			
             objAppearance = (dataLines[i].match(/\([A-Za-z,0-9\.]*\)/))[0];
             objAppearance = objAppearance.slice(1, objAppearance.length - 1).split(',');
             objAppearance[0] = this.calculateColor(objAppearance[0]);
+			
+			i = temp;
 
             do {
                 i += 1;
@@ -821,7 +835,7 @@
         },
 
         readCircleProperties: function (dataLines, i) {
-            var objAppearance, filling, fillop;
+            var objAppearance, filling, fillop, dashing;
 
             do {
                 i += 1;
@@ -833,6 +847,20 @@
 
             do {
                 i += 1;
+            } while (dataLines[i].search(/dashType/) === -1);		
+			
+            if (dataLines[i].search(/solid/) !== -1) {
+                dashing = 0;
+            } else if (dataLines[i].search(/dashed/) !== -1) {
+                dashing = 3;
+            } else if (dataLines[i].search(/tightdash/) !== -1) {
+                dashing = 2;
+            } else if (dataLines[i].search(/dotted/) !== -1) {
+                dashing = 1;
+            }			
+			
+            do {
+                i += 1;
             } while (dataLines[i].search(/colorfill/) === -1);
 
             filling = dataLines[i].match(/"[0-9]*"/)[0];
@@ -852,7 +880,7 @@
                 fillop = parseFloat(fillop);
             }
 
-            return [objAppearance, filling, fillop, i];
+            return [objAppearance, filling, fillop, i, dashing];
         },
 
         readLineProperties: function (dataLines, i) {
@@ -868,12 +896,16 @@
 
             do {
                 i += 1;
-            } while (dataLines[i].search(/linedashing/) === -1);
+            } while (dataLines[i].search(/dashType/) === -1);
 
-            if (dataLines[i].search(/false/) !== -1) {
+            if (dataLines[i].search(/solid/) !== -1) {
                 dashing = 0;
-            } else {
+            } else if (dataLines[i].search(/dashed/) !== -1) {
                 dashing = 3;
+            } else if (dataLines[i].search(/tightdash/) !== -1) {
+                dashing = 2;
+            } else if (dataLines[i].search(/dotted/) !== -1) {
+                dashing = 1;
             }
 
             return [objAppearance, dashing, i];
